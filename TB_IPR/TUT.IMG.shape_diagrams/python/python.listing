def evaluateQuality(x, y):
    global i
    n = 3;
    k_means = KMeans(init='k-means++', n_clusters=n)
    X = np.asarray(x);
    Y = np.asarray(y);
    pts = np.stack((X, Y));
    pts = pts.T;
    #print(pts)
    k_means.fit(pts);

    k_means_labels = k_means.labels_;
    k_means_cluster_centers = k_means.cluster_centers_;

    # plot
    fig = plt.figure()
    colors = ['#4EACC5', '#FF9C34', '#4E9A06']

    # KMeans
    for k, col in zip(range(n), colors):
        my_members = k_means_labels == k
        cluster_center = k_means_cluster_centers[k]
        plt.plot(pts[my_members, 0], pts[my_members, 1], 'o',
                markerfacecolor=col,  markersize=6)
        plt.plot(cluster_center[0], cluster_center[1], 'o', markerfacecolor=col,
                markeredgecolor='k', markersize=12)
    plt.title('KMeans')
    plt.show()
    fig.savefig("kmeans"+str(i)+".pdf");
    i += 1;

    """
    Evaluation of the quality: count the number of shapes correctly detected
    """
    accuracy = np.sum(k_means_labels[0:20]  == scipy.stats.mode(k_means_labels[0:20]));
    accuracy +=np.sum(k_means_labels[20:40] == scipy.stats.mode(k_means_labels[20:40]));
    accuracy +=np.sum(k_means_labels[40:60] == scipy.stats.mode(k_means_labels[40:60]));
    accuracy = accuracy / 60 * 100;
    print('Accuracy: {0:.2f}%'.format(accuracy));
